from aiogram import Router, F, types
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from backend.models import Place
from services.geolocation import get_location, get_map_image, get_place_index
from services.weather import get_weather
from use_cases.places_use_case import place_use_case

router = Router()


# places callbacks
class NumbersCallbackFactory(CallbackData, prefix="place"):
    id: int
    name: str
    page: int


def get_keyboard_fab(paginator, curr_place=None):
    builder = InlineKeyboardBuilder()

    curr_page = paginator['page']
    total = len(paginator['places'])

    for i, place in enumerate(paginator['places']):
        if type(place) is dict:
            place = Place(**place)

        index = get_place_index(curr_page, total, i+1)
        builder.button(
            text=f"üìç {index}. {place.title}" if curr_place == place.id else f"{index}. {place.title}",
            callback_data=NumbersCallbackFactory(id=place.id, name=place.title, page=curr_page)
        )

    if paginator['prev_page']:
        builder.button(
            text="–ù–∞–∑–∞–¥", callback_data=NumbersCallbackFactory(id=0, name='show prev', page=curr_page-1)
        )

    if paginator['next_page']:
        builder.button(
            text="–î–∞–ª—å—à–µ", callback_data=NumbersCallbackFactory(id=0, name='show next', page=curr_page+1)
        )
    builder.adjust(3)
    return builder.as_markup()


class LocationState(StatesGroup):
    choosing_city = State()
    choosing_address = State()
    showing_places = State()
    creating_place = State()
    rating_place = State()


@router.message(LocationState.choosing_city, F.location)
async def handle_geolocation(message: Message, state: FSMContext, today: str):
    lat = message.location.latitude
    lon = message.location.longitude

    weather = get_weather(lat=lat, lon=lon)
    await state.update_data(city=weather['city'])

    location = get_location(city=weather['city'], lat=lat, lon=lon)
    await state.update_data(address={'lat': lat, 'lon': lon})

    await state.set_state(LocationState.choosing_address)

    await message.answer(
        f"–¢–≤–æ–π –∞–¥—Ä–µ—Å: {location['name']}!\n "
        f"–°–µ–≥–æ–¥–Ω—è {today}, {weather['weather']}, {weather['temp']}‚ÑÉ.\n"
        f"–ò—â—É –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ 10-15 –º–∏–Ω—É—Ç–∞—Ö —Ö–æ–¥—å–±—ã...",
        reply_markup=types.ReplyKeyboardRemove()
    )

    places = await place_use_case.get_places_by_point(lat, lon)

    map_image = get_map_image(places, lat, lon)
    if map_image is not None:
        await message.answer_photo(
            photo=map_image,
            caption=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç:",
            reply_markup=get_keyboard_fab(places)
        )
    else:
        await message.answer(text=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç:", reply_markup=get_keyboard_fab(places))


@router.message(LocationState.choosing_city, F.text)
async def handle_text_location(message: Message, state: FSMContext, today: str):
    city = message.text
    await state.update_data(city=city)

    try:
        weather = get_weather(city=city)

        await message.answer(
            f"–¢–≤–æ–π –≥–æ—Ä–æ–¥: {city}!\n"
            f"–°–µ–≥–æ–¥–Ω—è {today}, {weather['weather']}, {weather['temp']}‚ÑÉ.\n"
            f"–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è —Å –∫–æ—Ñ–µ!",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –≤–∏–∂—É –∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å!",
            reply_markup=types.ReplyKeyboardRemove()
        )

    await message.answer("–ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: –≤ —Ä–∞–π–æ–Ω –∫–∞–∫–æ–≥–æ –º–µ—Ç—Ä–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è?")
    await state.set_state(LocationState.choosing_address)


@router.message(LocationState.choosing_address, F.text)
async def handle_subway(message: Message, state: FSMContext):
    subway = message.text
    await state.update_data(address=subway)

    user_data = await state.get_data()
    try:
        result = get_location(city=user_data.get('city'), location=f'—Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ {subway}')
        lat, lon = result['geometry']['lat'], result['geometry']['lng']
        await state.update_data(address={'lat': lat, 'lon': lon})

        await message.answer(
            text=f"–û—Ç–ª–∏—á–Ω–æ!\n{result['name']}\n–ò—â—É –∑–∞–≤–µ–¥–µ–Ω–∏—è –≤ 10-15 –º–∏–Ω—É—Ç–∞—Ö —Ö–æ–¥—å–±—ã...",
        )
        places = await place_use_case.get_places_by_point(lat, lon)

        map_image = get_map_image(places, lat, lon)
        if map_image is not None:
            await message.answer_photo(
                photo=map_image,
                caption=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç:",
                reply_markup=get_keyboard_fab(places)
            )
        else:
            await message.answer(text=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç:", reply_markup=get_keyboard_fab(places))

    except Exception as e:
        await message.answer(text=f"–ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é(\n–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å")

    await state.update_data()


@router.message(F.text)
async def handle_incorrectly(message: Message):
    await message.answer(
        text="–Ø –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑."
    )
